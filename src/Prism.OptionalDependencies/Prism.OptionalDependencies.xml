<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Prism.OptionalDependencies</name>
    </assembly>
    <members>
        <member name="T:Prism.Modularity.OptionalDependencies.CustomConfigurationModuleCatalog">
            <summary>
            Supports Optional tags in the module dependencies like so: ModuleName[optional]
            </summary>
        </member>
        <member name="T:Prism.Modularity.OptionalDependencies.CustomDirectoryModuleCatalog">
            <summary>
            Supports Optional tags in the module dependencies like so: ModuleName[optional]
            </summary>
        </member>
        <member name="T:Prism.Modularity.OptionalDependencies.CustomSubDirectoryModuleCatalog">
            <summary>
            Supports Optional tags in the module dependencies like so: ModuleName[optional] and SubDirectories.
            </summary>
        </member>
        <member name="T:Prism.Modularity.OptionalDependencies.SubDirectoryModuleCatalog">
             <summary>
             Represents a catalog created from a directory and its subdirectories on disk.
             </summary>
             <remarks>
             The directory catalog will scan the contents of a directory, locating classes that implement
             <see cref="T:Prism.Modularity.IModule"/> and add them to the catalog based on contents in their associated <see cref="T:Prism.Modularity.ModuleAttribute"/>.
             Assemblies are loaded into a new application domain with ReflectionOnlyLoad.  The application domain is destroyed
             once the assemblies have been discovered.
            
             The directory catalog does not continue to monitor the directory after it has created the initialze catalog.
             </remarks>
        </member>
        <member name="P:Prism.Modularity.OptionalDependencies.SubDirectoryModuleCatalog.ModulePath">
            <summary>
            Directory containing modules to search for.
            </summary>
        </member>
        <member name="M:Prism.Modularity.OptionalDependencies.SubDirectoryModuleCatalog.InnerLoad">
            <summary>
            Drives the main logic of building the child domain and searching for the assemblies.
            </summary>
        </member>
        <member name="M:Prism.Modularity.OptionalDependencies.SubDirectoryModuleCatalog.BuildChildDomain(System.AppDomain)">
            <summary>
            Creates a new child domain and copies the evidence from a parent domain.
            </summary>
            <param name="parentDomain">The parent domain.</param>
            <returns>The new child domain.</returns>
            <remarks>
            Grabs the <paramref name="parentDomain"/> evidence and uses it to construct the new
            <see cref="T:System.AppDomain"/> because in a ClickOnce execution environment, creating an
            <see cref="T:System.AppDomain"/> will by default pick up the partial trust environment of
            the AppLaunch.exe, which was the root executable. The AppLaunch.exe does a
            create domain and applies the evidence from the ClickOnce manifests to
            create the domain that the application is actually executing in. This will
            need to be Full Trust for Prism applications.
            </remarks>
            <exception cref="T:System.ArgumentNullException">An <see cref="T:System.ArgumentNullException"/> is thrown if <paramref name="parentDomain"/> is null.</exception>
        </member>
        <member name="M:Prism.Modularity.OptionalDependencies.Extensions.LinqExtensions.ForEachIndexed``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Does a ForEach while providing an index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ie"></param>
            <param name="action"></param>
        </member>
        <member name="T:Prism.Modularity.OptionalDependencies.OptionalDependencyHelper">
            <summary>
            Identifies the [optional] tag inside strings which are used as module dependencies and will either remove the dependency if the needed module is not available or keep it with the optional tag removed.
            </summary>
        </member>
        <member name="M:Prism.Modularity.OptionalDependencies.OptionalDependencyHelper.IsOptional(System.String@)">
            <summary>
            Checks if the optional tag is set and will remove it from the dependency if found.
            </summary>
            <param name="dependencyName"></param>
            <returns></returns>
        </member>
    </members>
</doc>
